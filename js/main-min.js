var restaurants,neighborhoods,cuisines,map,markers=[];document.addEventListener("DOMContentLoaded",function(a){updateRestaurants();fetchNeighborhoods();fetchCuisines()});
var fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(a,c){a?console.error(a):(self.neighborhoods=c,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(a){a=void 0===a?self.neighborhoods:a;var c=document.getElementById("neighborhoods-select");a.forEach(function(b){var a=document.createElement("option");a.innerHTML=b;a.value=b;c.append(a)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(a,c){a?console.error(a):(self.cuisines=c,fillCuisinesHTML())})},fillCuisinesHTML=
function(a){a=void 0===a?self.cuisines:a;var c=document.getElementById("cuisines-select");a.forEach(function(b){var a=document.createElement("option");a.innerHTML=b;a.value=b;c.append(a)})};window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1})};
var updateRestaurants=function(){var a=document.getElementById("cuisines-select"),c=document.getElementById("neighborhoods-select");DBHelper.fetchRestaurantByCuisineAndNeighborhood(a[a.selectedIndex].value,c[c.selectedIndex].value,function(b,a){b?console.error(b):(resetRestaurants(a),fillRestaurantsHTML())})},resetRestaurants=function(a){self.restaurants=[];document.getElementById("restaurants-list").innerHTML="";self.markers.forEach(function(a){return a.setMap(null)});self.markers=[];self.restaurants=
a},fillRestaurantsHTML=function(a){a=void 0===a?self.restaurants:a;var c=document.getElementById("restaurants-list");a.forEach(function(a){c.append(createRestaurantHTML(a))});lazyLoadImages();addMarkersToMap()},createRestaurantHTML=function(a){var c=document.createElement("li");c.className="container-rest-details";var b=document.createElement("div");b.className="column";c.append(b);var d=document.createElement("picture");b.append(d);b=document.createElement("source");b.media="(max-width: 10rem)";
b.dataset.srcset=DBHelper.imageUrlForRestaurant(a)+"-128w.jpg";d.append(b);b=document.createElement("source");b.media="(max-width: 30rem)";b.dataset.srcset=DBHelper.imageUrlForRestaurant(a)+"-400w.jpg";d.append(b);b=document.createElement("source");b.media="(min-width: 30rem)";b.dataset.srcset=DBHelper.imageUrlForRestaurant(a)+"-500w.jpg";d.append(b);b=document.createElement("img");b.className="lazy restaurant-img";b.alt="image of "+a.name+" restaurant";b.src="img/image-placeholder.png";b.dataset.src=
DBHelper.imageUrlForRestaurant(a)+".webp";d.append(b);d=document.createElement("div");d.className="column";c.append(d);b=document.createElement("h3");b.innerHTML=a.name;d.append(b);b=document.createElement("p");b.innerHTML=a.neighborhood;d.append(b);b=document.createElement("p");b.innerHTML=a.address;d.append(b);b=document.createElement("a");b.innerHTML="View Details";b.href=DBHelper.urlForRestaurant(a);d.append(b);return c},addMarkersToMap=function(a){a=void 0===a?self.restaurants:a;a.forEach(function(a){var b=
DBHelper.mapMarkerForRestaurant(a,self.map);google.maps.event.addListener(b,"click",function(){window.location.href=b.url});self.markers.push(b)})};
function lazyLoadImages(){console.log("starting lazy load");var a=[].slice.call(document.querySelectorAll("img.lazy"));if("IntersectionObserver"in window){console.log("IntersectionObserver activated for lazy images");var c=new IntersectionObserver(function(a,d){a.forEach(function(a){a.isIntersecting&&(a=a.target,a.src=a.dataset.src,console.log("lazy image: "+a),console.log("IntersectionObserver changed src of lazy img"),a.classList.remove("lazy"),c.unobserve(a))})});a.forEach(function(a){c.observe(a)})}else console.log("lazy load for images did not succeed")}
function loadScript(a,c){var b=document.createElement("script");c&&(b.onload=c);document.getElementsByTagName("head")[0].appendChild(b);b.src=a}var mapUrl="https://maps.googleapis.com/maps/api/js?key\x3dAIzaSyB3Lyq5LfH6rBtpR4SwP02qEdQA01CQfEc\x26libraries\x3dplaces";function initializeMap(){loadScript(mapUrl,function(){map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1});updateRestaurants()})}
function lazyLoadMap(){console.log("starting lazy load");var a=[].slice.call(document.querySelectorAll("div#map"));if("IntersectionObserver"in window){console.log("IntersectionObserver activated for load map");var c=new IntersectionObserver(function(a,d){a.forEach(function(a){a.isIntersecting&&(console.log("lazy image: "+lzMap),console.log("IntersectionObserver changed map"),initializeMap(),c.unobserve(lzMap))})});a.forEach(function(a){c.observe(a)})}else console.log("lazy load map did not succeed")}
document.getElementById("loadMap").addEventListener("click",function(){console.log("button load map clicked");initializeMap()});document.getElementById("updateRest").addEventListener("click",function(){updateRestaurants()});"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("sw-min.js").then(function(a){console.log("ServiceWorker registration successful with scope: ",a.scope)},function(a){console.log("ServiceWorker registration failed: ",a)})});