class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL).then((t)=>t.json()).then(function(e){return t(null,e)}).catch((t)=>function(t){console.log(t)}(t))}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((n,l)=>{if(n)e(n,null);else{const n=l.find((e)=>e.id==t);n?e(null,n):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((n,l)=>{if(n)e(n,null);else{const n=
l.filter((e)=>e.cuisine_type==t);e(null,n)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((n,l)=>{if(n)e(n,null);else{const n=l.filter((e)=>e.neighborhood==t);e(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,n){DBHelper.fetchRestaurants((l,a)=>{if(l)n(l,null);else{let l=a;"all"!=t&&(l=l.filter((e)=>e.cuisine_type==t)),"all"!=e&&(l=l.filter((t)=>t.neighborhood==e)),n(null,l)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,n)=>{if(e)t(e,null);else{const e=
n.map((t,e)=>n[e].neighborhood),l=e.filter((t,n)=>e.indexOf(t)==n);t(null,l)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].cuisine_type),l=e.filter((t,n)=>e.indexOf(t)==n);t(null,l)}})}static urlForRestaurant(t){return`./restaurant.html?id\x3d${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),
map:e,animation:google.maps.Animation.DROP})}}
class DBHelper{static get DATABASE_URL(){const port=1337;return`http://localhost:${port}/restaurants`}static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then((response)=>{return response.json()}).then(displayAllRestarurants).catch((e)=>requestError(e));function displayAllRestarurants(jsonData){var restaurants=jsonData;return callback(null,restaurants)}function requestError(e){console.log(e)}}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,
null);else{const restaurant=restaurants.find((r)=>r.id==id);if(restaurant)callback(null,restaurant);else callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter((r)=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,
null);else{const results=restaurants.filter((r)=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;if(cuisine!="all")results=results.filter((r)=>r.cuisine_type==cuisine);if(neighborhood!="all")results=results.filter((r)=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,
restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,
uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id\x3d${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}`}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}const dbName="restaurantDB";const dbVersion=8;var note=document.getElementById("notifications");
if(!window.indexedDB)console.log("browser doesn't support a stable version of IndexedDB.");else console.log("browser supports IndexedDB.");
window.onload=function(){var request=indexedDB.open(dbName,dbVersion);request.onerror=function(event){console.log("indexedDB error: "+this.error)};request.onsuccess=function(event){console.log("Database initialised succesfully: "+event);var db=event.target.result;db.onerror=function(event){console.log("Database error: "+event.target.errorCode)};var transaction=db.transaction(["restaurants"],"readwrite");var objectStore=transaction.objectStore("restaurants");const addRestaurantsToDB=(restaurants=self.restaurants)=>
{restaurants.forEach((restaurant)=>{var requestAddRestaurant=objectStore.add(restaurant);console.log("restaurant object added to db:"+restaurant);requestAddRestaurant.onsuccess=function(event){console.log("Request to add restaurant was successful")}})};addRestaurantsToDB();transaction.oncomplete=function(){console.log("Transaction completed: database modification finished")};transaction.onerror=function(){console.log("Transaction not opened due to error: "+transaction.error)};var restaurants=[];const fetchRestaurantsFromDB=
()=>{var transaction=db.transaction("restaurants");var objectStore=transaction.objectStore("restaurants");objectStore.openCursor().onsuccess=function(event){var cursor=event.target.result;if(cursor){console.log("Name for restaurant key: "+cursor.key+" is "+cursor.value.name);restaurants.push(cursor.value);cursor.continue()}else console.log("No more entries!")}};fetchRestaurantsFromDB()};request.onupgradeneeded=function(event){console.log("onupgradeneeded request triggered: "+event);var db=event.target.result;
db.onerror=function(event){console.log("Error loading database")};db.onversionchange=function(event){note.innerHTML+="\x3cdiv\x3ea database change has occurred; you should refresh this browser window, or close it down and use the other open version of this application, wherever it exists.\x3c/div\x3e "};var objectStore=db.createObjectStore("restaurants",{keyPath:"name"});console.log("Object store restaurants created")}};var restaurants,neighborhoods,cuisines,map,markers=[];
document.addEventListener("DOMContentLoaded",function(a){fetchNeighborhoods();fetchCuisines()});
var fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(a,c){a?console.error(a):(self.neighborhoods=c,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(a){a=void 0===a?self.neighborhoods:a;var c=document.getElementById("neighborhoods-select");a.forEach(function(b){var a=document.createElement("option");a.innerHTML=b;a.value=b;c.append(a)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(a,c){a?console.error(a):(self.cuisines=c,fillCuisinesHTML())})},fillCuisinesHTML=
function(a){a=void 0===a?self.cuisines:a;var c=document.getElementById("cuisines-select");a.forEach(function(b){var a=document.createElement("option");a.innerHTML=b;a.value=b;c.append(a)})};window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1});updateRestaurants()};
var updateRestaurants=function(){var a=document.getElementById("cuisines-select"),c=document.getElementById("neighborhoods-select");DBHelper.fetchRestaurantByCuisineAndNeighborhood(a[a.selectedIndex].value,c[c.selectedIndex].value,function(a,c){a?console.error(a):(resetRestaurants(c),fillRestaurantsHTML())})},resetRestaurants=function(a){self.restaurants=[];document.getElementById("restaurants-list").innerHTML="";self.markers.forEach(function(a){return a.setMap(null)});self.markers=[];self.restaurants=
a},fillRestaurantsHTML=function(a){a=void 0===a?self.restaurants:a;var c=document.getElementById("restaurants-list");a.forEach(function(a){c.append(createRestaurantHTML(a))});addMarkersToMap()},createRestaurantHTML=function(a){var c=document.createElement("li");c.className="container-rest-details";var b=document.createElement("div");b.className="column";c.append(b);var d=document.createElement("picture");b.append(d);b=document.createElement("source");b.media="(max-width: 10rem)";b.srcset=DBHelper.imageUrlForRestaurant(a)+
"-128w.jpg";d.append(b);b=document.createElement("source");b.media="(max-width: 30rem)";b.srcset=DBHelper.imageUrlForRestaurant(a)+"-400w.jpg";d.append(b);b=document.createElement("source");b.media="(max-width: 30rem)";b.srcset=DBHelper.imageUrlForRestaurant(a)+"-500w.jpg";d.append(b);b=document.createElement("img");b.className="restaurant-img";b.alt="image of "+a.name+" restaurant";b.src=DBHelper.imageUrlForRestaurant(a)+".jpg";d.append(b);d=document.createElement("div");d.className="column";c.append(d);
b=document.createElement("h2");b.innerHTML=a.name;d.append(b);b=document.createElement("p");b.innerHTML=a.neighborhood;d.append(b);b=document.createElement("p");b.innerHTML=a.address;d.append(b);b=document.createElement("a");b.innerHTML="View Details";b.href=DBHelper.urlForRestaurant(a);d.append(b);return c},addMarkersToMap=function(a){a=void 0===a?self.restaurants:a;a.forEach(function(a){var b=DBHelper.mapMarkerForRestaurant(a,self.map);google.maps.event.addListener(b,"click",function(){window.location.href=
b.url});self.markers.push(b)})};let restaurants,neighborhoods,cuisines;var map;var markers=[];document.addEventListener("DOMContentLoaded",(event)=>{fetchNeighborhoods();fetchCuisines()});const fetchNeighborhoods=()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{if(error)console.error(error);else{self.neighborhoods=neighborhoods;fillNeighborhoodsHTML()}})};
const fillNeighborhoodsHTML=(neighborhoods=self.neighborhoods)=>{const select=document.getElementById("neighborhoods-select");neighborhoods.forEach((neighborhood)=>{const option=document.createElement("option");option.innerHTML=neighborhood;option.value=neighborhood;select.append(option)})};const fetchCuisines=()=>{DBHelper.fetchCuisines((error,cuisines)=>{if(error)console.error(error);else{self.cuisines=cuisines;fillCuisinesHTML()}})};
const fillCuisinesHTML=(cuisines=self.cuisines)=>{const select=document.getElementById("cuisines-select");cuisines.forEach((cuisine)=>{const option=document.createElement("option");option.innerHTML=cuisine;option.value=cuisine;select.append(option)})};window.initMap=()=>{let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:loc,scrollwheel:false});updateRestaurants()};
const updateRestaurants=()=>{const cSelect=document.getElementById("cuisines-select");const nSelect=document.getElementById("neighborhoods-select");const cIndex=cSelect.selectedIndex;const nIndex=nSelect.selectedIndex;const cuisine=cSelect[cIndex].value;const neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{if(error)console.error(error);else{resetRestaurants(restaurants);fillRestaurantsHTML()}})};
const resetRestaurants=(restaurants)=>{self.restaurants=[];const ul=document.getElementById("restaurants-list");ul.innerHTML="";self.markers.forEach((m)=>m.setMap(null));self.markers=[];self.restaurants=restaurants};const fillRestaurantsHTML=(restaurants=self.restaurants)=>{const ul=document.getElementById("restaurants-list");restaurants.forEach((restaurant)=>{ul.append(createRestaurantHTML(restaurant))});addMarkersToMap()};
const createRestaurantHTML=(restaurant)=>{const li=document.createElement("li");li.className="container-rest-details";const container_img=document.createElement("div");container_img.className="column";li.append(container_img);const picture=document.createElement("picture");container_img.append(picture);const picture_sourceThumb=document.createElement("source");picture_sourceThumb.media="(max-width: 10rem)";picture_sourceThumb.srcset=DBHelper.imageUrlForRestaurant(restaurant)+"-128w.jpg";picture.append(picture_sourceThumb);
const picture_sourceSmall=document.createElement("source");picture_sourceSmall.media="(max-width: 30rem)";picture_sourceSmall.srcset=DBHelper.imageUrlForRestaurant(restaurant)+"-400w.jpg";picture.append(picture_sourceSmall);const picture_sourceBig=document.createElement("source");picture_sourceBig.media="(max-width: 30rem)";picture_sourceBig.srcset=DBHelper.imageUrlForRestaurant(restaurant)+"-500w.jpg";picture.append(picture_sourceBig);const image=document.createElement("img");image.className="restaurant-img";
image.alt="image of "+restaurant.name+" restaurant";image.src=DBHelper.imageUrlForRestaurant(restaurant)+".jpg";picture.append(image);const container_details=document.createElement("div");container_details.className="column";li.append(container_details);const name=document.createElement("h2");name.innerHTML=restaurant.name;container_details.append(name);const neighborhood=document.createElement("p");neighborhood.innerHTML=restaurant.neighborhood;container_details.append(neighborhood);const address=
document.createElement("p");address.innerHTML=restaurant.address;container_details.append(address);const more=document.createElement("a");more.innerHTML="View Details";more.href=DBHelper.urlForRestaurant(restaurant);container_details.append(more);return li};const addMarkersToMap=(restaurants=self.restaurants)=>{restaurants.forEach((restaurant)=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,"click",()=>{window.location.href=marker.url});self.markers.push(marker)})};
let restaurant;var map;window.initMap=()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})};
const fetchRestaurantFromURL=(e)=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))},fillRestaurantHTML=(e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");
t.className="restaurant-img",t.alt="image of "+e.name+" restaurant",t.src=DBHelper.imageUrlForRestaurant(e)+".jpg",document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()},fillRestaurantHoursHTML=(e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const l=document.createElement("td");
l.innerHTML=e[n],r.appendChild(l),t.appendChild(r)}},fillReviewsHTML=(e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach((e)=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)},createReviewHTML=(e)=>{const t=document.createElement("li"),
n=document.createElement("div"),r=document.createElement("section");n.innerHTML=e.name,n.tabIndex="0",t.appendChild(r),r.appendChild(n);const a=document.createElement("div");a.innerHTML=e.date,r.appendChild(a);const l=document.createElement("p");l.innerHTML=`Rating: ${e.rating}`,t.appendChild(l);const s=document.createElement("p");return s.innerHTML=e.comments,t.appendChild(s),t},fillBreadcrumb=(e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=
e.name,t.appendChild(n)},getParameterByName=(e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$\x26");const n=(new RegExp(`[?\x26]${e}(\x3d([^\x26#]*)|\x26|#|$)`)).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null};let restaurant;var map;
window.initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error)console.error(error);else{self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:restaurant.latlng,scrollwheel:false});fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.map)}})};
const fetchRestaurantFromURL=(callback)=>{if(self.restaurant){callback(null,self.restaurant);return}const id=getParameterByName("id");if(!id){error="No restaurant id in URL";callback(error,null)}else DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return}fillRestaurantHTML();callback(null,restaurant)})};
const fillRestaurantHTML=(restaurant=self.restaurant)=>{const name=document.getElementById("restaurant-name");name.innerHTML=restaurant.name;const address=document.getElementById("restaurant-address");address.innerHTML=restaurant.address;const image=document.getElementById("restaurant-img");image.className="restaurant-img";image.alt="image of "+restaurant.name+" restaurant";image.src=DBHelper.imageUrlForRestaurant(restaurant)+".jpg";const cuisine=document.getElementById("restaurant-cuisine");cuisine.innerHTML=
restaurant.cuisine_type;if(restaurant.operating_hours)fillRestaurantHoursHTML();fillReviewsHTML()};const fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById("restaurant-hours");for(let key in operatingHours){const row=document.createElement("tr");const day=document.createElement("td");day.innerHTML=key;row.appendChild(day);const time=document.createElement("td");time.innerHTML=operatingHours[key];row.appendChild(time);hours.appendChild(row)}};
const fillReviewsHTML=(reviews=self.restaurant.reviews)=>{const container=document.getElementById("reviews-container");const title=document.createElement("h2");title.innerHTML="Reviews";container.appendChild(title);if(!reviews){const noReviews=document.createElement("p");noReviews.innerHTML="No reviews yet!";container.appendChild(noReviews);return}const ul=document.getElementById("reviews-list");reviews.forEach((review)=>{ul.appendChild(createReviewHTML(review))});container.appendChild(ul)};
const createReviewHTML=(review)=>{const li=document.createElement("li");const name=document.createElement("div");const header=document.createElement("section");name.innerHTML=review.name;name.tabIndex="0";li.appendChild(header);header.appendChild(name);const date=document.createElement("div");date.innerHTML=review.date;header.appendChild(date);const rating=document.createElement("p");rating.innerHTML=`Rating: ${review.rating}`;li.appendChild(rating);const comments=document.createElement("p");comments.innerHTML=
review.comments;li.appendChild(comments);return li};const fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById("breadcrumb");const li=document.createElement("li");li.innerHTML=restaurant.name;breadcrumb.appendChild(li)};
const getParameterByName=(name,url)=>{if(!url)url=window.location.href;name=name.replace(/[\[\]]/g,"\\$\x26");const regex=new RegExp(`[?\x26]${name}(\x3d([^\x26#]*)|\x26|#|$)`),results=regex.exec(url);if(!results)return null;if(!results[2])return"";return decodeURIComponent(results[2].replace(/\+/g," "))};